{"version":3,"sources":["components/ScoreComponent.tsx","coreGames/tetris/settings.ts","coreGames/tetris/tetrominoes.ts","coreGames/tetris/game.ts","coreGames/tetris/helpers.ts","coreGames/tetris/view.ts","utills/detectDevice.ts","coreGames/tetris/controller.ts","components/Tetris.tsx","pages/TetrisPage.tsx"],"names":["ScoreComponent","stat","useAppSelector","selectTetrisStat","className","lines","style","marginLeft","score","level","BLOCKS_HEIGHT","Colors","POINTS","LVL_MAP","lvlMap","Map","set","setLvlMap","SPEED_MAP","speedMap","setSpeedMap","t_I","t_J","t_L","t_O","t_S","t_T","t_Z","Game","playfield","this","createPlayfield","activePiece","createPiece","nextPiece","isOver","currentLvl","nextLvlUp","get","Math","floor","getState","blocks","x","pX","y","pY","length","next","type","random","piece","blockType","Error","createBlockHelper","ceil","movePeaceLeft","isCollision","movePeaceRight","movePeaceDown","lockPiece","clearedLines","clearLines","updateScore","updatePieces","rotatePiece","rotateBlocks","clockwise","i","j","temp","undefined","store","dispatch","gameOver","gamePlaying","err","rows","numberOfBlocks","unshift","index","splice","Array","fill","lvlUp","increaseStats","lowerZero","nextLvl","View","constructor","context","width","height","columns","blockWidth","blockHeight","borderWidth","render","clearScreen","renderPlayfield","renderNext","clearRect","renderStartScreen","drawMessages","message","renderPauseScreen","renderGameOverScreen","messagesArray","fillStyle","fillRect","font","textAlign","textBaseline","forEach","item","fillText","line","renderBlock","color","strokeStyle","lineWidth","strokeRect","ifDeviceHasTouch","window","Controller","game","view","intervalID","isPlaying","gameSpeed","isTouch","document","addEventListener","handleKeydown","bind","setTimeout","handleMobileActions","update","handleGameOver","stopTimer","startTimer","play","pause","setInterval","clearInterval","event","key","toLowerCase","handlePause","handleLeft","handleUp","handleRight","handleDown","querySelector","top","down","left","right","globalObj","controller","Tetris","canvasRef","useRef","selectIsTetrisOver","selectIsTetrisStarted","gamesAmount","setGamesAmount","useState","useEffect","canvas","current","getContext","console","error","marginBottom","onClick","prevAmount","id","ref","TetrisPage"],"mappings":"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","file":"static/js/3.3959642c.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useAppSelector } from '../hoocks';\r\nimport { selectTetrisStat } from '../store/tetrisReducer';\r\n\r\nexport function ScoreComponent() {\r\n  const stat = useAppSelector(selectTetrisStat);\r\n\r\n  return (\r\n    <div className=\"tetris-score\">\r\n      <span>Lines: {stat.lines}</span>\r\n      <span style={{ marginLeft: '1rem' }}>Score: {stat.score}</span>\r\n      <span style={{ marginLeft: '1rem' }}>Level: {stat.level}</span>\r\n    </div>\r\n  );\r\n}\r\n","import { PointsType } from './types';\r\n\r\nexport const BLOCKS_WIDTH = 10;\r\nexport const BLOCKS_HEIGHT = 20;\r\n\r\nexport enum Colors {\r\n  '#ed4938',\r\n  '#adc607',\r\n  '#f4c10d',\r\n  '#de3974',\r\n  '#7b3dba',\r\n  '#f87117',\r\n  '#03cec2',\r\n}\r\n\r\nexport const POINTS: PointsType = {\r\n  '1': 40,\r\n  '2': 120,\r\n  '3': 300,\r\n  '4': 1200,\r\n};\r\n\r\nexport const LVL_MAP = setLvlMap();\r\n\r\n// todo: don't forget speed link https://tetris.fandom.com/wiki/Tetris_(NES,_Nintendo)\r\nfunction setLvlMap() {\r\n  const lvlMap = new Map();\r\n\r\n  lvlMap.set(0, 10);\r\n  lvlMap.set(1, 20);\r\n  lvlMap.set(2, 30);\r\n  lvlMap.set(3, 40);\r\n  lvlMap.set(4, 50);\r\n  lvlMap.set(5, 60);\r\n  lvlMap.set(6, 70);\r\n  lvlMap.set(7, 80);\r\n  lvlMap.set(8, 90);\r\n  lvlMap.set(9, 100);\r\n  lvlMap.set(10, 100);\r\n  lvlMap.set(11, 100);\r\n  lvlMap.set(12, 100);\r\n  lvlMap.set(13, 100);\r\n  lvlMap.set(14, 100);\r\n  lvlMap.set(15, 100);\r\n  lvlMap.set(16, 110);\r\n  lvlMap.set(17, 120);\r\n  lvlMap.set(18, 130);\r\n  lvlMap.set(19, 140);\r\n  lvlMap.set(20, 150);\r\n  lvlMap.set(21, 160);\r\n  lvlMap.set(22, 170);\r\n  lvlMap.set(23, 180);\r\n  lvlMap.set(24, 190);\r\n  lvlMap.set(25, 200);\r\n\r\n  return lvlMap;\r\n}\r\n\r\nexport function calculatePointsForOneLine(currentLvl: number, birnLines: number) {\r\n  return POINTS[birnLines] * (currentLvl + 1);\r\n}\r\n\r\n// todo: don't forget speed link https://listfist.com/list-of-tetris-levels-by-speed-nes-ntsc-vs-pal\r\n\r\nexport const SPEED_MAP = setSpeedMap();\r\n\r\nfunction setSpeedMap() {\r\n  const speedMap = new Map();\r\n\r\n  speedMap.set(0, 15974 / BLOCKS_HEIGHT);\r\n  speedMap.set(1, 14310 / BLOCKS_HEIGHT);\r\n  speedMap.set(2, 12646 / BLOCKS_HEIGHT);\r\n  speedMap.set(3, 10982 / BLOCKS_HEIGHT);\r\n  speedMap.set(4, 9318 / BLOCKS_HEIGHT);\r\n  speedMap.set(5, 7654 / BLOCKS_HEIGHT);\r\n  speedMap.set(6, 5990 / BLOCKS_HEIGHT);\r\n  speedMap.set(7, 4326 / BLOCKS_HEIGHT);\r\n  speedMap.set(8, 2662 / BLOCKS_HEIGHT);\r\n  speedMap.set(9, 1997 / BLOCKS_HEIGHT);\r\n  speedMap.set(10, 1664 / BLOCKS_HEIGHT);\r\n  speedMap.set(11, 1664 / BLOCKS_HEIGHT);\r\n  speedMap.set(12, 1664 / BLOCKS_HEIGHT);\r\n  speedMap.set(13, 1331 / BLOCKS_HEIGHT);\r\n  speedMap.set(14, 1331 / BLOCKS_HEIGHT);\r\n  speedMap.set(15, 1331 / BLOCKS_HEIGHT);\r\n  speedMap.set(16, 998 / BLOCKS_HEIGHT);\r\n  speedMap.set(17, 998 / BLOCKS_HEIGHT);\r\n  speedMap.set(18, 998 / BLOCKS_HEIGHT);\r\n  speedMap.set(19, 666 / BLOCKS_HEIGHT);\r\n  speedMap.set(20, 666 / BLOCKS_HEIGHT);\r\n  speedMap.set(21, 666 / BLOCKS_HEIGHT);\r\n  speedMap.set(22, 666 / BLOCKS_HEIGHT);\r\n  speedMap.set(23, 666 / BLOCKS_HEIGHT);\r\n  speedMap.set(24, 666 / BLOCKS_HEIGHT);\r\n  speedMap.set(25, 666 / BLOCKS_HEIGHT);\r\n  speedMap.set(26, 666 / BLOCKS_HEIGHT);\r\n  speedMap.set(27, 666 / BLOCKS_HEIGHT);\r\n  speedMap.set(28, 666 / BLOCKS_HEIGHT);\r\n  speedMap.set(29, 333 / BLOCKS_HEIGHT);\r\n\r\n  return speedMap;\r\n}\r\n","export const t_I = [\r\n  [0, 0, 0, 0],\r\n  [1, 1, 1, 1],\r\n  [0, 0, 0, 0],\r\n  [0, 0, 0, 0],\r\n];\r\n\r\nexport const t_J = [\r\n  [0, 0, 0],\r\n  [2, 2, 2],\r\n  [0, 0, 2],\r\n];\r\n\r\nexport const t_L = [\r\n  [0, 0, 0],\r\n  [3, 3, 3],\r\n  [3, 0, 0],\r\n];\r\n\r\nexport const t_O = [\r\n  [0, 0, 0, 0],\r\n  [0, 4, 4, 0],\r\n  [0, 4, 4, 0],\r\n  [0, 0, 0, 0],\r\n];\r\n\r\nexport const t_S = [\r\n  [0, 0, 0],\r\n  [0, 5, 5],\r\n  [5, 5, 0],\r\n];\r\n\r\nexport const t_T = [\r\n  [0, 0, 0],\r\n  [6, 6, 6],\r\n  [0, 6, 0],\r\n];\r\n\r\nexport const t_Z = [\r\n  [0, 0, 0],\r\n  [7, 7, 0],\r\n  [0, 7, 7],\r\n];\r\n","import { PieceType, PlayfieldType } from './types';\r\nimport { calculatePointsForOneLine, LVL_MAP } from './settings';\r\nimport { gameOver, increaseStats, gamePlaying } from '../../store/tetrisReducer';\r\nimport { store } from '../../store';\r\nimport { createBlockHelper } from './helpers';\r\n\r\nexport class Game {\r\n  score = 0;\r\n  lines = 0;\r\n  playfield: PlayfieldType = this.createPlayfield();\r\n  activePiece: PieceType = this.createPiece();\r\n  nextPiece: PieceType = this.createPiece();\r\n  isOver = false;\r\n  currentLvl = 0;\r\n  nextLvlUp = LVL_MAP.get(this.currentLvl);\r\n\r\n  get level() {\r\n    return Math.floor(this.lines * 0.1);\r\n  }\r\n\r\n  getState() {\r\n    const playfield = this.createPlayfield();\r\n    const { blocks, x: pX, y: pY } = this.activePiece;\r\n\r\n    for (let y = 0; y < this.playfield.length; y++) {\r\n      playfield[y] = [];\r\n\r\n      for (let x = 0; x < this.playfield[y].length; x++) {\r\n        playfield[y][x] = this.playfield[y][x];\r\n      }\r\n    }\r\n\r\n    for (let y = 0; y < blocks.length; y++) {\r\n      for (let x = 0; x < blocks[y].length; x++) {\r\n        if (blocks[y] && blocks[y][x]) {\r\n          // fix for hidden blocks\r\n          if (playfield[pY + y] && [pX + x]) {\r\n            playfield[pY + y][pX + x] = blocks[y][x];\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return { playfield, next: this.nextPiece, level: this.level, isOver: this.isOver };\r\n  }\r\n\r\n  createPlayfield() {\r\n    const playfield: PlayfieldType = [];\r\n\r\n    for (let y = 0; y < 20; y++) {\r\n      playfield[y] = [];\r\n\r\n      for (let x = 0; x < 10; x++) {\r\n        playfield[y][x] = 0;\r\n      }\r\n    }\r\n\r\n    return playfield;\r\n  }\r\n\r\n  createPiece(): PieceType {\r\n    const index = Math.floor(Math.random() * 7);\r\n    const type = 'IJLOSTZ'[index];\r\n    const piece: PieceType = { x: 0, y: 0 };\r\n\r\n    piece.blocks = createBlockHelper(type);\r\n    piece.x = Math.ceil((10 - piece.blocks[0].length) / 2);\r\n    piece.y = -1;\r\n\r\n    return piece;\r\n  }\r\n\r\n  movePeaceLeft() {\r\n    this.activePiece.x -= 1;\r\n\r\n    if (this.isCollision()) {\r\n      this.activePiece.x += 1;\r\n    }\r\n  }\r\n\r\n  movePeaceRight() {\r\n    this.activePiece.x += 1;\r\n\r\n    if (this.isCollision()) {\r\n      this.activePiece.x -= 1;\r\n    }\r\n  }\r\n\r\n  movePeaceDown() {\r\n    if (this.isOver) {\r\n      return;\r\n    }\r\n\r\n    this.activePiece.y += 1;\r\n\r\n    if (this.isCollision()) {\r\n      this.activePiece.y -= 1;\r\n      this.lockPiece();\r\n      const clearedLines = this.clearLines();\r\n      this.updateScore(clearedLines);\r\n      this.updatePieces();\r\n    }\r\n  }\r\n\r\n  rotatePiece() {\r\n    this.rotateBlocks();\r\n\r\n    if (this.isCollision()) {\r\n      this.rotateBlocks(false);\r\n    }\r\n  }\r\n\r\n  rotateBlocks(clockwise: boolean = true) {\r\n    const { blocks } = this.activePiece;\r\n    const length = blocks.length;\r\n    const x = Math.floor(length / 2);\r\n    const y = length - 1;\r\n\r\n    // Standard Rotate Algorithm\r\n    for (let i = 0; i < x; i++) {\r\n      for (let j = i; j < y - i; j++) {\r\n        const temp = blocks[i][j];\r\n\r\n        if (clockwise) {\r\n          // by clockwise rotation\r\n          blocks[i][j] = blocks[y - j][i];\r\n          blocks[y - j][i] = blocks[y - i][y - j];\r\n          blocks[y - i][y - j] = blocks[j][y - i];\r\n          blocks[j][y - i] = temp;\r\n        } else {\r\n          // opposite direction if there is collision\r\n          blocks[i][j] = blocks[j][y - i];\r\n          blocks[j][y - i] = blocks[y - i][y - j];\r\n          blocks[y - i][y - j] = blocks[y - j][i];\r\n          blocks[y - j][i] = temp;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  isCollision(): boolean {\r\n    const { blocks, x: pX, y: pY } = this.activePiece;\r\n\r\n    for (let y = 0; y < blocks.length; y++) {\r\n      for (let x = 0; x < blocks[y].length; x++) {\r\n        if (\r\n          blocks[y][x] &&\r\n          (this.playfield[pY + y] === undefined ||\r\n            this.playfield[pY + y][pX + x] === undefined ||\r\n            this.playfield[pY + y][pX + x])\r\n        ) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  lockPiece() {\r\n    const { blocks, x: pX, y: pY } = this.activePiece;\r\n\r\n    if (pY < 0) {\r\n      this.isOver = true;\r\n      store.dispatch(gameOver(true));\r\n      store.dispatch(gamePlaying(false));\r\n      return;\r\n    }\r\n\r\n    for (let y = 0; y < blocks.length; y++) {\r\n      for (let x = 0; x < blocks[y].length; x++) {\r\n        if (blocks[y] && blocks[y][x]) {\r\n          try {\r\n            this.playfield[pY + y][pX + x] = blocks[y][x];\r\n          } catch (err) {\r\n            this.isOver = true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  clearLines() {\r\n    const rows = 20;\r\n    const columns = 10;\r\n    const lines = [];\r\n\r\n    for (let y = rows - 1; y >= 0; y--) {\r\n      let numberOfBlocks = 0;\r\n\r\n      for (let x = 0; x < columns; x++) {\r\n        if (this.playfield[y][x]) {\r\n          numberOfBlocks += 1;\r\n        }\r\n      }\r\n\r\n      if (numberOfBlocks === 0) {\r\n        break;\r\n      } else if (numberOfBlocks === columns) {\r\n        lines.unshift(y);\r\n      }\r\n    }\r\n\r\n    let index;\r\n    for (index of lines) {\r\n      this.playfield.splice(index, 1);\r\n      this.playfield.unshift(new Array(columns).fill(0));\r\n    }\r\n\r\n    return lines.length;\r\n  }\r\n\r\n  updateScore(clearedLines: number) {\r\n    if (clearedLines > 0) {\r\n      this.score += calculatePointsForOneLine(this.level, clearedLines);\r\n      this.lines += clearedLines;\r\n      this.nextLvlUp -= clearedLines;\r\n\r\n      if (this.nextLvlUp <= 0) {\r\n        this.lvlUp();\r\n      }\r\n    }\r\n\r\n    store.dispatch(\r\n      increaseStats({\r\n        score: this.score,\r\n        level: this.level,\r\n        lines: this.lines,\r\n      }),\r\n    );\r\n  }\r\n\r\n  lvlUp() {\r\n    const lowerZero = this.nextLvlUp;\r\n    const nextLvl = LVL_MAP.get(this.currentLvl);\r\n\r\n    this.currentLvl = this.currentLvl + 1;\r\n    this.nextLvlUp = nextLvl ? nextLvl + lowerZero : 200 + lowerZero;\r\n  }\r\n\r\n  updatePieces() {\r\n    this.activePiece = this.nextPiece;\r\n    this.nextPiece = this.createPiece();\r\n  }\r\n}\r\n","import { t_I, t_J, t_L, t_O, t_S, t_T, t_Z } from './tetrominoes';\r\n\r\nexport function createBlockHelper(blockType: string) {\r\n  switch (blockType) {\r\n    case 'I':\r\n      return t_I;\r\n    case 'J':\r\n      return t_J;\r\n    case 'L':\r\n      return t_L;\r\n    case 'O':\r\n      return t_O;\r\n    case 'S':\r\n      return t_S;\r\n    case 'T':\r\n      return t_T;\r\n    case 'Z':\r\n      return t_Z;\r\n    default:\r\n      break;\r\n  }\r\n  throw new Error('wrong block type');\r\n}\r\n","import { DrawMessagesType, PieceType, PlayfieldObjType, PlayfieldType } from './types';\r\nimport { Colors } from './settings';\r\n\r\nexport class View {\r\n  context: CanvasRenderingContext2D;\r\n  width: number;\r\n  height: number;\r\n  rows: number;\r\n  columns: number;\r\n  blockWidth: number;\r\n  blockHeight: number;\r\n  borderWidth: number;\r\n\r\n  constructor(context: CanvasRenderingContext2D, width: number, height: number, rows: number, columns: number) {\r\n    this.width = width;\r\n    this.height = height;\r\n    this.rows = rows;\r\n    this.columns = columns;\r\n\r\n    this.context = context;\r\n\r\n    this.borderWidth = 2;\r\n    this.blockWidth = (this.width - this.borderWidth * 2) / columns;\r\n    this.blockHeight = (this.height - this.borderWidth * 2) / rows;\r\n  }\r\n\r\n  render({ playfield, next }: PlayfieldObjType) {\r\n    this.clearScreen();\r\n    this.renderPlayfield(playfield);\r\n    this.renderNext(next);\r\n  }\r\n\r\n  clearScreen() {\r\n    this.context.clearRect(0, 0, this.width, this.height);\r\n  }\r\n\r\n  renderStartScreen() {\r\n    this.drawMessages([\r\n      {\r\n        message: 'Press ENTER to play game',\r\n        x: this.width / 2,\r\n        y: this.height / 2,\r\n      },\r\n    ]);\r\n  }\r\n\r\n  renderPauseScreen() {\r\n    this.drawMessages([\r\n      {\r\n        message: 'PAUSE',\r\n        x: this.width / 2,\r\n        y: (this.height - 25) / 2,\r\n      },\r\n      {\r\n        message: 'Press ENTER to resume',\r\n        x: this.width / 2,\r\n        y: (this.height + 25) / 2,\r\n      },\r\n    ]);\r\n  }\r\n\r\n  renderGameOverScreen() {\r\n    this.drawMessages([\r\n      {\r\n        message: 'GAME OVER',\r\n        x: this.width / 2,\r\n        y: this.height / 2,\r\n      },\r\n    ]);\r\n  }\r\n\r\n  drawMessages(messagesArray: DrawMessagesType[]) {\r\n    this.context.fillStyle = 'rgba(0,0,0,.8)';\r\n    this.context.fillRect(0, 0, this.width, this.height);\r\n    this.context.fillStyle = 'white';\r\n    this.context.font = '18px sans-serif';\r\n    this.context.textAlign = 'center';\r\n    this.context.textBaseline = 'middle';\r\n    messagesArray.forEach((item) => {\r\n      this.context.fillText(item.message, item.x, item.y);\r\n    });\r\n  }\r\n\r\n  renderPlayfield(playfield: PlayfieldType) {\r\n    for (let y = 0; y < playfield.length; y++) {\r\n      const line = playfield[y];\r\n\r\n      for (let x = 0; x < line.length; x++) {\r\n        const block = playfield[y][x];\r\n\r\n        if (block) {\r\n          this.renderBlock(\r\n            this.borderWidth + x * this.blockWidth,\r\n            this.borderWidth + y * this.blockHeight,\r\n            this.blockWidth,\r\n            this.blockHeight,\r\n            Colors[playfield[y][x] - 1],\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  renderNext(nextPiece: PieceType) {\r\n    const { blocks } = nextPiece;\r\n\r\n    for (let y = 0; y < blocks.length; y++) {\r\n      for (let x = 0; x < blocks[y].length; x++) {\r\n        if (blocks[y][x]) {\r\n          this.context.fillStyle = Colors[blocks[y][x] - 1] + '33';\r\n          this.context.fillRect(x * 10 + (this.width - 40), y * 10 + 10, 10, 10);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  renderBlock(x: number, y: number, width: number, height: number, color: string) {\r\n    this.context.fillStyle = color;\r\n    this.context.strokeStyle = '#333';\r\n    this.context.lineWidth = 2;\r\n\r\n    this.context.fillRect(x, y, width, height);\r\n\r\n    this.context.strokeRect(x, y, width, height);\r\n  }\r\n}\r\n","export function ifDeviceHasTouch() {\r\n  return 'ontouchstart' in window;\r\n}\r\n","import { Game } from './game';\r\nimport { View } from './view';\r\nimport { SPEED_MAP } from './settings';\r\nimport { gamePlaying } from '../../store/tetrisReducer';\r\nimport { store } from '../../store';\r\nimport { ifDeviceHasTouch } from '../../utills/detectDevice';\r\n\r\nexport class Controller {\r\n  game: Game;\r\n  view: View;\r\n  intervalID: NodeJS.Timeout;\r\n  isPlaying: boolean = false;\r\n  isOver: boolean = false;\r\n  gameSpeed: number;\r\n  currentLvl: number;\r\n  isTouch: boolean;\r\n\r\n  constructor(game: Game, view: View) {\r\n    this.game = game;\r\n    this.view = view;\r\n    this.intervalID = null;\r\n    this.currentLvl = this.game.getState().level;\r\n    this.gameSpeed = SPEED_MAP.get(this.currentLvl);\r\n    this.isTouch = ifDeviceHasTouch();\r\n\r\n    document.addEventListener('keydown', this.handleKeydown.bind(this));\r\n    if (this.isTouch) {\r\n      setTimeout(() => {\r\n        this.handleMobileActions();\r\n      }, 100);\r\n    }\r\n\r\n    this.view.renderStartScreen();\r\n  }\r\n\r\n  update() {\r\n    const { level, isOver } = this.game.getState();\r\n\r\n    if (isOver) {\r\n      this.isOver = true;\r\n      this.handleGameOver();\r\n      return;\r\n    }\r\n\r\n    this.game.movePeaceDown();\r\n    this.view.render(this.game.getState());\r\n\r\n    if (this.currentLvl !== level) {\r\n      this.currentLvl = level;\r\n      this.gameSpeed = SPEED_MAP.get(this.currentLvl);\r\n\r\n      this.stopTimer();\r\n      this.startTimer();\r\n    }\r\n  }\r\n\r\n  play() {\r\n    this.isPlaying = true;\r\n    this.startTimer();\r\n    this.update();\r\n  }\r\n\r\n  pause() {\r\n    this.isPlaying = false;\r\n    this.stopTimer();\r\n    this.view.renderPauseScreen();\r\n  }\r\n\r\n  startTimer() {\r\n    if (!this.intervalID) {\r\n      this.intervalID = setInterval(() => {\r\n        this.update();\r\n      }, this.gameSpeed);\r\n    }\r\n  }\r\n\r\n  stopTimer() {\r\n    if (this.intervalID) {\r\n      clearInterval(this.intervalID);\r\n      this.intervalID = null;\r\n    }\r\n  }\r\n\r\n  handleKeydown(event: KeyboardEvent) {\r\n    switch (event.key.toLowerCase()) {\r\n      case 'enter':\r\n        this.handlePause();\r\n        break;\r\n      case 'arrowleft':\r\n        this.handleLeft();\r\n        break;\r\n      case 'arrowup':\r\n        this.handleUp();\r\n        break;\r\n      case 'arrowright':\r\n        this.handleRight();\r\n        break;\r\n      case 'arrowdown':\r\n        this.handleDown();\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  handleMobileActions() {\r\n    const pause = document.querySelector('#pause');\r\n    const top = document.querySelector('#top');\r\n    const down = document.querySelector('#bottom');\r\n    const left = document.querySelector('#left');\r\n    const right = document.querySelector('#right');\r\n\r\n    if (!pause || !top || !down || !left || !right) {\r\n      setTimeout(() => {\r\n        this.handleMobileActions();\r\n      }, 100);\r\n      return;\r\n    }\r\n\r\n    pause.addEventListener('click', this.handlePause.bind(this));\r\n    top.addEventListener('click', this.handleUp.bind(this));\r\n    down.addEventListener('click', this.handleDown.bind(this));\r\n    left.addEventListener('click', this.handleLeft.bind(this));\r\n    right.addEventListener('click', this.handleRight.bind(this));\r\n  }\r\n\r\n  handlePause() {\r\n    if (this.isOver) {\r\n      return;\r\n    }\r\n\r\n    this.view.render(this.game.getState());\r\n\r\n    if (this.isPlaying) {\r\n      this.pause();\r\n      store.dispatch(gamePlaying(false));\r\n    } else {\r\n      this.play();\r\n      store.dispatch(gamePlaying(true));\r\n    }\r\n  }\r\n\r\n  handleUp() {\r\n    if (this.isOver) {\r\n      return;\r\n    }\r\n    this.game.rotatePiece();\r\n    this.view.render(this.game.getState());\r\n  }\r\n\r\n  handleDown() {\r\n    if (this.isOver) {\r\n      return;\r\n    }\r\n    this.game.movePeaceDown();\r\n    this.view.render(this.game.getState());\r\n  }\r\n\r\n  handleLeft() {\r\n    if (this.isOver) {\r\n      return;\r\n    }\r\n    this.game.movePeaceLeft();\r\n    this.view.render(this.game.getState());\r\n  }\r\n\r\n  handleRight() {\r\n    if (this.isOver) {\r\n      return;\r\n    }\r\n    this.game.movePeaceRight();\r\n    this.view.render(this.game.getState());\r\n  }\r\n\r\n  handleGameOver() {\r\n    this.isPlaying = false;\r\n    this.stopTimer();\r\n    this.view.renderGameOverScreen();\r\n  }\r\n}\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { ScoreComponent } from './ScoreComponent';\r\nimport { Game } from '../coreGames/tetris/game';\r\nimport { View } from '../coreGames/tetris/view';\r\nimport { Controller } from '../coreGames/tetris/controller';\r\nimport { BLOCKS_HEIGHT, BLOCKS_WIDTH } from '../coreGames/tetris/settings';\r\nimport { useAppSelector } from '../hoocks';\r\nimport { gameOver, increaseStats, selectIsTetrisOver, selectIsTetrisStarted } from '../store/tetrisReducer';\r\nimport { store } from '../store';\r\nimport { ifDeviceHasTouch } from '../utills/detectDevice';\r\n\r\nconst globalObj: GlobalObjType = {\r\n  controller: undefined,\r\n  game: undefined,\r\n  view: undefined,\r\n};\r\n\r\nexport function Tetris() {\r\n  const canvasRef = useRef(null);\r\n  const isOver = useAppSelector(selectIsTetrisOver);\r\n  const isPlaying = useAppSelector(selectIsTetrisStarted);\r\n  const [gamesAmount, setGamesAmount] = useState(0);\r\n  const isTouch = ifDeviceHasTouch();\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n\r\n    if (canvas?.getContext('2d')) {\r\n      const game = new Game();\r\n      const view = new View(canvas.getContext('2d'), 320, 640, BLOCKS_HEIGHT, BLOCKS_WIDTH);\r\n      const controller = new Controller(game, view);\r\n\r\n      globalObj.game = game;\r\n      globalObj.view = view;\r\n      globalObj.controller = controller;\r\n    } else {\r\n      console.error('problems with canvas');\r\n    }\r\n  }, [gamesAmount]);\r\n\r\n  const resetGame = () => {\r\n    store.dispatch(gameOver(false));\r\n    store.dispatch(increaseStats({ score: 0, level: 0, lines: 0 }));\r\n    setGamesAmount((prevAmount) => prevAmount + 1);\r\n    const canvas = canvasRef.current;\r\n    if (canvas?.getContext('2d')) {\r\n      const ctx = canvas.getContext('2d');\r\n      ctx.clearRect(0, 0, BLOCKS_WIDTH, BLOCKS_HEIGHT);\r\n    } else {\r\n      console.error('problems with canvas');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div style={{ marginBottom: '1rem' }}>\r\n        {isOver && (\r\n          <button className=\"tetris__reset\" onClick={resetGame}>\r\n            reset\r\n          </button>\r\n        )}\r\n        <ScoreComponent />\r\n      </div>\r\n      <div className={`tetris__canvas--wrapper${!isTouch ? ' mobile' : ''}`}>\r\n        {isTouch && !isOver && (\r\n          <div className=\"tetris__game-btn--wrapper left\">\r\n            <button id=\"pause\" className=\"tetris__game-btn pause\">\r\n              {isPlaying ? '║' : '►'}\r\n            </button>\r\n            <button id=\"top\" className=\"tetris__game-btn top\">\r\n              ↑\r\n            </button>\r\n            <button id=\"bottom\" className=\"tetris__game-btn down\">\r\n              ↓\r\n            </button>\r\n          </div>\r\n        )}\r\n\r\n        <canvas className=\"tetris__canvas\" width=\"320\" height=\"640\" ref={canvasRef} />\r\n\r\n        {isTouch && !isOver && (\r\n          <div className=\"tetris__game-btn--wrapper right\">\r\n            <button id=\"left\" className=\"tetris__game-btn left\">\r\n              ←\r\n            </button>\r\n            <button id=\"right\" className=\"tetris__game-btn right\">\r\n              →\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\ninterface GlobalObjType {\r\n  controller: Controller;\r\n  game: Game;\r\n  view: View;\r\n}\r\n","import React from 'react';\r\nimport { Tetris } from '../components/Tetris';\r\n\r\nexport default function TetrisPage() {\r\n  return <>\r\n    <div className=\"wrapper ta__center\">\r\n      <Tetris />\r\n    </div>\r\n  </>;\r\n}\r\n"],"sourceRoot":""}